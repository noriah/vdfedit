#!/usr/bin/python
#######################################
# Python Valve Data File (VDF) Editor #
# Version: 14                         #
# Utilizes PyVDF                      #
# https://github.com/noriah/PyVDF  #
# Author: noriah              #
# Copyright (c) 2013 noriah   #
#######################################

import sys
import re
import profile
from collections import OrderedDict

from PyVDF.VDFParser import VDFParser
from PyVDF.VDFWriter import VDFWriter

ARRAY_JOINER = "+"

class VDFArgsParser:
	def __init__(self, string):
		self.data = list()
		self.chars = list(string)
		self.chars.append(None)
		self.chars.append(None)
		self.__parse__()

	def __parse__(self):
		string = ''
		array = list()
		quoted = False
		char = None
		lastchar = None
		nextchar = None
		comma = ','
		obrace = '{'
		cbrace = '}'
		escape = '\\'
		for i, nextchar in enumerate(self.chars):
			if i == 0: pass
			elif char is None: array.append(string)
			elif char == "\n": pass
			elif char == escape:
				if nextchar != obrace and nextchar != cbrace: string+= char
				else: pass
			elif char == obrace:
				if quoted or lastchar == escape: string += char
				else: quoted = True
			elif char == cbrace:
				if lastchar == escape: string += char
				else: quoted = False
			elif char == comma:
				if quoted: string += char
				else:
					array.append(string)
					string = ''
			else: string += char
			lastchar = char
			char = nextchar
		self.data = array

	def getData(self):
		return self.data

def FlattenArray(array):
	out = list()
	for a in array.keys():
		if re.search("\.", a) != None: b = "[" + a + "]"
		else: b = a
		if isinstance(array[a], OrderedDict):
			out.append(b)
			c = FlattenArray(array[a])
			c = [b + '.{0}'.format(i) for i in c]
			out += c
		else: out.append(b + " " + array[a])
	return out

def FlattenArrayExport(array):
	out = list()
	for a in array.keys():
		if re.search("\.", a) != None: b = "[" + a + "]"
		else: b = a
		if isinstance(array[a], OrderedDict):
			c = FlattenArrayExport(array[a])
			c = [b + '.{0}'.format(i) for i in c]
			out += c
		else:
			array[a] = re.sub('{', '\\{', re.sub('}', '\\}', array[a]))
			if re.search(",", array[a]) is not None: r = '{' + array[a] + '}'
			else: r = array[a]
			out.append(b + "=" + r)
	return out

def main():
	if not sys.stdin.isatty():
			var2 = sys.stdin.read()
			var2 = re.sub('\\n', '', var2)
			sys.argv.append(var2)
	length = len(sys.argv)
	if length > 1:
		files = sys.argv[1].split(',')
		if len(files) > 1:
			readFile = files[0]
			writeFile = files[1]
		else:
			readFile = files[0]
			writeFile = files[0]
		vdf = VDFParser(readFile)
		if length > 2:
			if sys.argv[2] == '-g':
				print(',\n'.join(FlattenArrayExport(vdf.getData())))
				return
			args = VDFArgsParser(','.join(sys.argv[2:])).getData()
			finds = list()
			sets = list()
			for p in args:
				if re.search("=", p) is None: finds.append(p)
				else: sets.append(p)
			if len(sets):
				writer = VDFWriter(writeFile, vdf.getData())
				writer.editMany(sets)
				writer.write()
			if len(finds):
				founds = vdf.findMany(finds)
				for f in founds:
					if isinstance(f, OrderedDict):
						founds.remove(f)
						print("\n".join(FlattenArray(f)))
				if len(founds): print(ARRAY_JOINER.join(founds))
		else:
			if vdf != None: print("\n".join(FlattenArray(vdf.getData())))

	else:
		print(sys.argv[0] + ": Missing Arguments")
		print("Usage: (filename) [path[=value][,path]]")
		print("Returned values are seperated by a '" + ARRAY_JOINER + "'.")

	return

if __name__ == "__main__":
	profile.run('main()')
