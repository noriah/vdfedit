#!/usr/bin/python
#######################################
# Python Valve Data File (VDF) Editor #
# Version: 14                         #
# Utilizes PyVDF                      #
# https://github.com/noriah/PyVDF  #
# Author: noriah              #
# Copyright (c) 2014 noriah   #
#######################################

import sys
import re
import argparse

from PyVDF import PyVDF

PyVDF.useFastDict(False)
PyVDF.setCondensed(True)

def FlattenArray(array):
  out = list()
  for a in array.keys():
    b = a
    if re.search("\.", b) != None: b = "[" + b + "]"
    if re.search(" ", b) != None: b = '"' + b + '"'
    if isinstance(array[a], dict):
      out.append(b)
      out += ['{0}.{1}'.format(b,i) for i in FlattenArray(array[a])]
    else: out.append('{0}="{1}"'.format(b,array[a]))
  return out

def main():

  parser = argparse.ArgumentParser(prog="vdfedit",
                                   description="Read and Write VDF KeyValue Files")

  parser.add_argument('infile', type=str,
                      help="The file to Read",
                      metavar="FILE")

  parser.add_argument('-o', '--out', type=str,
                      help="The file to Write out to Defaults to the infile",
                      metavar="FILE", dest="outfile")

  parser.add_argument('-g', '--get', action="append", type=str,
                      help="Add a key to Search For",
                      metavar="key", dest="gets")

  parser.add_argument('-s', '--set', action="append", type=str,
                      help="Add a key-value pair to the vdf",
                      metavar="key=value", dest="sets")

  parser.add_argument('-d', '--delim', default=",", type=str,
                      help="Set the string used to separate found values. Defaults to '+'",
                      metavar="str", dest="delim")

  parser.add_argument('-p', '--print', action='store_true',
                      help="Print the file as groups of Paths.Key=Value",
                      dest="print_flat")

  if not sys.stdin.isatty():
    import shlex
    var2 = sys.stdin.read()
    var2 = re.sub('\\n', ' ', var2)
    sys.argv += shlex.split(var2)

  args = parser.parse_args()

  args.outfile = args.outfile if args.outfile else args.infile if args.infile else None

  if args.gets is not None or args.sets is not None or args.print_flat:
    vdf, gets, sets = PyVDF(), args.gets, args.sets
    vdf.load_file(args.infile)

    if args.print_flat and args.gets is not None:
      print(" --get cannot be accompanied by --print")
      return
      
    if args.gets is not None:
      gets = vdf.findMany(args.gets)
      for g in gets:
        if isinstance(g, dict):
          gets.remove(g)
          print("\n".join(FlattenArray(g)).decode("string-escape"))
      if len(gets):
        print(args.delim.join(gets).decode("string-escape"))
    
    if args.sets is not None:
      sets = list()
      setsa = sets.append
      for string in args.sets:
        try:
          setsa((string.split("=", 1)))
        except ValueError:
          print("Statement Contains no Value to set (Missing the = sign)\n {}".format(string))
          return
      vdf.editMany(sets)
      vdf.write_file(args.outfile)

    if args.print_flat:
      print("\n".join(FlattenArray(vdf.getData())))

  else:
    print(" At least one of --get, --set or --print is required.")
    return


if __name__ == "__main__":
  main()